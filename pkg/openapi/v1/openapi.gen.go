// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ExpenseExpenseStatus.
const (
	Approved        ExpenseExpenseStatus = "approved"
	PendingApproval ExpenseExpenseStatus = "pending_approval"
	Rejected        ExpenseExpenseStatus = "rejected"
)

// Defines values for ExpenseCreateCategory.
const (
	Akomodasi  ExpenseCreateCategory = "akomodasi"
	BahanBakar ExpenseCreateCategory = "bahan_bakar"
	Kantor     ExpenseCreateCategory = "kantor"
	Kesehatan  ExpenseCreateCategory = "kesehatan"
	Komunikasi ExpenseCreateCategory = "komunikasi"
	LainLain   ExpenseCreateCategory = "lain_lain"
	Liburan    ExpenseCreateCategory = "liburan"
	Makan      ExpenseCreateCategory = "makan"
	Pelatihan  ExpenseCreateCategory = "pelatihan"
	Pemasaran  ExpenseCreateCategory = "pemasaran"
	Perjalanan ExpenseCreateCategory = "perjalanan"
	Software   ExpenseCreateCategory = "software"
)

// ApprovalRequest defines model for ApprovalRequest.
type ApprovalRequest struct {
	Notes *string `json:"notes,omitempty"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ComponentStatus defines model for ComponentStatus.
type ComponentStatus struct {
	CheckedAt  *time.Time `json:"checked_at,omitempty"`
	DurationMs *int       `json:"duration_ms,omitempty"`
	Status     *string    `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Expense defines model for Expense.
type Expense struct {
	// AmountIdr Amount in Indonesian Rupiah
	AmountIdr *int `json:"amount_idr,omitempty"`

	// Category Expense category
	Category *string `json:"category,omitempty"`

	// CreatedAt When the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Expense description
	Description *string `json:"description,omitempty"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate *time.Time `json:"expense_date,omitempty"`

	// ExpenseStatus Current status of the expense
	ExpenseStatus *ExpenseExpenseStatus `json:"expense_status,omitempty"`

	// Id Unique expense ID
	Id *int `json:"id,omitempty"`

	// ProcessedAt When the expense was processed (approved/rejected)
	ProcessedAt *time.Time `json:"processed_at"`

	// ReceiptFilename Original filename of the receipt
	ReceiptFilename *string `json:"receipt_filename"`

	// ReceiptUrl URL of the receipt file from external storage
	ReceiptUrl *string `json:"receipt_url"`

	// SubmittedAt When the expense was submitted
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`

	// UpdatedAt When the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId ID of user who created the expense
	UserId *int `json:"user_id,omitempty"`
}

// ExpenseExpenseStatus Current status of the expense
type ExpenseExpenseStatus string

// ExpenseCreate defines model for ExpenseCreate.
type ExpenseCreate struct {
	// AmountIdr Amount in Indonesian Rupiah
	AmountIdr int `json:"amount_idr"`

	// Category Expense category
	Category ExpenseCreateCategory `json:"category"`

	// Description Expense description
	Description string `json:"description"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate time.Time `json:"expense_date"`

	// ReceiptFilename Original filename of the receipt (from mock server response)
	ReceiptFilename *string `json:"receipt_filename"`

	// ReceiptUrl URL of the receipt file from external storage (from mock server response)
	ReceiptUrl *string `json:"receipt_url"`
}

// ExpenseCreateCategory Expense category
type ExpenseCreateCategory string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CheckedAt  *time.Time                  `json:"checked_at,omitempty"`
	Components *map[string]ComponentStatus `json:"components,omitempty"`
	Status     *string                     `json:"status,omitempty"`
}

// PagedExpenses defines model for PagedExpenses.
type PagedExpenses struct {
	Items   *[]Expense `json:"items,omitempty"`
	Page    *int       `json:"page,omitempty"`
	PerPage *int       `json:"per_page,omitempty"`
	Total   *int       `json:"total,omitempty"`
}

// PaymentRetryRequest defines model for PaymentRetryRequest.
type PaymentRetryRequest struct {
	// ExpenseId The expense ID associated with the payment
	ExpenseId string `json:"expense_id"`

	// ExternalId The external payment ID to retry
	ExternalId string `json:"external_id"`
}

// PaymentRetryResponse defines model for PaymentRetryResponse.
type PaymentRetryResponse struct {
	// Message Response message
	Message *string `json:"message,omitempty"`

	// PaymentId New payment ID if successful
	PaymentId *string `json:"payment_id,omitempty"`
}

// User defines model for User.
type User struct {
	Department  *string   `json:"department,omitempty"`
	Email       *string   `json:"email,omitempty"`
	Id          *int      `json:"id,omitempty"`
	IsActive    *bool     `json:"is_active,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
}

// AuthRefreshJSONBody defines parameters for AuthRefresh.
type AuthRefreshJSONBody struct {
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ListExpensesParams defines parameters for ListExpenses.
type ListExpensesParams struct {
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage  *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Status   *string `form:"status,omitempty" json:"status,omitempty"`
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// GetPendingApprovalsParams defines parameters for GetPendingApprovals.
type GetPendingApprovalsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// RejectExpenseJSONBody defines parameters for RejectExpense.
type RejectExpenseJSONBody struct {
	Reason string `json:"reason"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = AuthRequest

// AuthRefreshJSONRequestBody defines body for AuthRefresh for application/json ContentType.
type AuthRefreshJSONRequestBody AuthRefreshJSONBody

// CreateExpenseJSONRequestBody defines body for CreateExpense for application/json ContentType.
type CreateExpenseJSONRequestBody = ExpenseCreate

// ApproveExpenseJSONRequestBody defines body for ApproveExpense for application/json ContentType.
type ApproveExpenseJSONRequestBody = ApprovalRequest

// RejectExpenseJSONRequestBody defines body for RejectExpense for application/json ContentType.
type RejectExpenseJSONRequestBody RejectExpenseJSONBody

// RetryPaymentJSONRequestBody defines body for RetryPayment for application/json ContentType.
type RetryPaymentJSONRequestBody = PaymentRetryRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"gSoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
