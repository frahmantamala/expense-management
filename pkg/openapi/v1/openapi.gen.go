// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ExpenseExpenseStatus.
const (
	Approved        ExpenseExpenseStatus = "approved"
	PendingApproval ExpenseExpenseStatus = "pending_approval"
	Rejected        ExpenseExpenseStatus = "rejected"
)

// Defines values for ExpenseCreateCategory.
const (
	Akomodasi  ExpenseCreateCategory = "akomodasi"
	BahanBakar ExpenseCreateCategory = "bahan_bakar"
	Kantor     ExpenseCreateCategory = "kantor"
	Kesehatan  ExpenseCreateCategory = "kesehatan"
	Komunikasi ExpenseCreateCategory = "komunikasi"
	LainLain   ExpenseCreateCategory = "lain_lain"
	Liburan    ExpenseCreateCategory = "liburan"
	Makan      ExpenseCreateCategory = "makan"
	Pelatihan  ExpenseCreateCategory = "pelatihan"
	Pemasaran  ExpenseCreateCategory = "pemasaran"
	Perjalanan ExpenseCreateCategory = "perjalanan"
	Software   ExpenseCreateCategory = "software"
)

// ApprovalRequest defines model for ApprovalRequest.
type ApprovalRequest struct {
	Notes *string `json:"notes,omitempty"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ComponentStatus defines model for ComponentStatus.
type ComponentStatus struct {
	CheckedAt  *time.Time `json:"checked_at,omitempty"`
	DurationMs *int       `json:"duration_ms,omitempty"`
	Status     *string    `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Expense defines model for Expense.
type Expense struct {
	// AmountIdr Amount in Indonesian Rupiah
	AmountIdr *int `json:"amount_idr,omitempty"`

	// Category Expense category
	Category *string `json:"category,omitempty"`

	// CreatedAt When the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Expense description
	Description *string `json:"description,omitempty"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate *time.Time `json:"expense_date,omitempty"`

	// ExpenseStatus Current status of the expense
	ExpenseStatus *ExpenseExpenseStatus `json:"expense_status,omitempty"`

	// Id Unique expense ID
	Id *int `json:"id,omitempty"`

	// ProcessedAt When the expense was processed (approved/rejected)
	ProcessedAt *time.Time `json:"processed_at"`

	// ReceiptFilename Original filename of the receipt
	ReceiptFilename *string `json:"receipt_filename"`

	// ReceiptUrl URL of the receipt file from external storage
	ReceiptUrl *string `json:"receipt_url"`

	// SubmittedAt When the expense was submitted
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`

	// UpdatedAt When the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId ID of user who created the expense
	UserId *int `json:"user_id,omitempty"`
}

// ExpenseExpenseStatus Current status of the expense
type ExpenseExpenseStatus string

// ExpenseCreate defines model for ExpenseCreate.
type ExpenseCreate struct {
	// AmountIdr Amount in Indonesian Rupiah (minimum 10,000 IDR, maximum 50,000,000 IDR)
	AmountIdr int `json:"amount_idr"`

	// Category Expense category
	Category ExpenseCreateCategory `json:"category"`

	// Description Expense description
	Description string `json:"description"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate time.Time `json:"expense_date"`

	// ReceiptFilename Original filename of the receipt (from mock server response)
	ReceiptFilename *string `json:"receipt_filename"`

	// ReceiptUrl URL of the receipt file from external storage (from mock server response)
	ReceiptUrl *string `json:"receipt_url"`
}

// ExpenseCreateCategory Expense category
type ExpenseCreateCategory string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CheckedAt  *time.Time                  `json:"checked_at,omitempty"`
	Components *map[string]ComponentStatus `json:"components,omitempty"`
	Status     *string                     `json:"status,omitempty"`
}

// PagedExpenses defines model for PagedExpenses.
type PagedExpenses struct {
	Items   *[]Expense `json:"items,omitempty"`
	Page    *int       `json:"page,omitempty"`
	PerPage *int       `json:"per_page,omitempty"`
	Total   *int       `json:"total,omitempty"`
}

// PaymentRetryRequest defines model for PaymentRetryRequest.
type PaymentRetryRequest struct {
	// ExpenseId The expense ID associated with the payment
	ExpenseId string `json:"expense_id"`

	// ExternalId The external payment ID to retry
	ExternalId string `json:"external_id"`
}

// PaymentRetryResponse defines model for PaymentRetryResponse.
type PaymentRetryResponse struct {
	// Message Response message
	Message *string `json:"message,omitempty"`

	// PaymentId New payment ID if successful
	PaymentId *string `json:"payment_id,omitempty"`
}

// User defines model for User.
type User struct {
	Department  *string   `json:"department,omitempty"`
	Email       *string   `json:"email,omitempty"`
	Id          *int      `json:"id,omitempty"`
	IsActive    *bool     `json:"is_active,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
}

// AuthRefreshJSONBody defines parameters for AuthRefresh.
type AuthRefreshJSONBody struct {
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ListExpensesParams defines parameters for ListExpenses.
type ListExpensesParams struct {
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage  *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Status   *string `form:"status,omitempty" json:"status,omitempty"`
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// GetPendingApprovalsParams defines parameters for GetPendingApprovals.
type GetPendingApprovalsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// RejectExpenseJSONBody defines parameters for RejectExpense.
type RejectExpenseJSONBody struct {
	Reason string `json:"reason"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = AuthRequest

// AuthRefreshJSONRequestBody defines body for AuthRefresh for application/json ContentType.
type AuthRefreshJSONRequestBody AuthRefreshJSONBody

// CreateExpenseJSONRequestBody defines body for CreateExpense for application/json ContentType.
type CreateExpenseJSONRequestBody = ExpenseCreate

// ApproveExpenseJSONRequestBody defines body for ApproveExpense for application/json ContentType.
type ApproveExpenseJSONRequestBody = ApprovalRequest

// RejectExpenseJSONRequestBody defines body for RejectExpense for application/json ContentType.
type RejectExpenseJSONRequestBody RejectExpenseJSONBody

// RetryPaymentJSONRequestBody defines body for RetryPayment for application/json ContentType.
type RetryPaymentJSONRequestBody = PaymentRetryRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DXuRSwMoWHA9pKur1f8CAAD//wRXkVOxKgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
