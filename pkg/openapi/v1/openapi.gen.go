// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ExpenseExpenseStatus.
const (
	Approved        ExpenseExpenseStatus = "approved"
	PendingApproval ExpenseExpenseStatus = "pending_approval"
	Rejected        ExpenseExpenseStatus = "rejected"
)

// Defines values for ExpenseCreateCategory.
const (
	Akomodasi  ExpenseCreateCategory = "akomodasi"
	BahanBakar ExpenseCreateCategory = "bahan_bakar"
	Kantor     ExpenseCreateCategory = "kantor"
	Kesehatan  ExpenseCreateCategory = "kesehatan"
	Komunikasi ExpenseCreateCategory = "komunikasi"
	LainLain   ExpenseCreateCategory = "lain_lain"
	Liburan    ExpenseCreateCategory = "liburan"
	Makan      ExpenseCreateCategory = "makan"
	Pelatihan  ExpenseCreateCategory = "pelatihan"
	Pemasaran  ExpenseCreateCategory = "pemasaran"
	Perjalanan ExpenseCreateCategory = "perjalanan"
	Software   ExpenseCreateCategory = "software"
)

// ApprovalRequest defines model for ApprovalRequest.
type ApprovalRequest struct {
	Notes *string `json:"notes,omitempty"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ComponentStatus defines model for ComponentStatus.
type ComponentStatus struct {
	CheckedAt  *time.Time `json:"checked_at,omitempty"`
	DurationMs *int       `json:"duration_ms,omitempty"`
	Status     *string    `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Expense defines model for Expense.
type Expense struct {
	// AmountIdr Amount in Indonesian Rupiah
	AmountIdr *int `json:"amount_idr,omitempty"`

	// Category Expense category
	Category *string `json:"category,omitempty"`

	// CreatedAt When the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Expense description
	Description *string `json:"description,omitempty"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate *time.Time `json:"expense_date,omitempty"`

	// ExpenseStatus Current status of the expense
	ExpenseStatus *ExpenseExpenseStatus `json:"expense_status,omitempty"`

	// Id Unique expense ID
	Id *int `json:"id,omitempty"`

	// ProcessedAt When the expense was processed (approved/rejected)
	ProcessedAt *time.Time `json:"processed_at"`

	// SubmittedAt When the expense was submitted
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`

	// UpdatedAt When the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId ID of user who created the expense
	UserId *int `json:"user_id,omitempty"`
}

// ExpenseExpenseStatus Current status of the expense
type ExpenseExpenseStatus string

// ExpenseCreate defines model for ExpenseCreate.
type ExpenseCreate struct {
	// AmountIdr Amount in Indonesian Rupiah
	AmountIdr int `json:"amount_idr"`

	// Category Expense category
	Category ExpenseCreateCategory `json:"category"`

	// Description Expense description
	Description string `json:"description"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate time.Time `json:"expense_date"`
}

// ExpenseCreateCategory Expense category
type ExpenseCreateCategory string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CheckedAt  *time.Time                  `json:"checked_at,omitempty"`
	Components *map[string]ComponentStatus `json:"components,omitempty"`
	Status     *string                     `json:"status,omitempty"`
}

// PagedExpenses defines model for PagedExpenses.
type PagedExpenses struct {
	Items   *[]Expense `json:"items,omitempty"`
	Page    *int       `json:"page,omitempty"`
	PerPage *int       `json:"per_page,omitempty"`
	Total   *int       `json:"total,omitempty"`
}

// PaymentRetryRequest defines model for PaymentRetryRequest.
type PaymentRetryRequest struct {
	// ExpenseId The expense ID associated with the payment
	ExpenseId string `json:"expense_id"`

	// ExternalId The external payment ID to retry
	ExternalId string `json:"external_id"`
}

// PaymentRetryResponse defines model for PaymentRetryResponse.
type PaymentRetryResponse struct {
	// Message Response message
	Message *string `json:"message,omitempty"`

	// PaymentId New payment ID if successful
	PaymentId *string `json:"payment_id,omitempty"`
}

// User defines model for User.
type User struct {
	Department  *string   `json:"department,omitempty"`
	Email       *string   `json:"email,omitempty"`
	Id          *int      `json:"id,omitempty"`
	IsActive    *bool     `json:"is_active,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
}

// AuthRefreshJSONBody defines parameters for AuthRefresh.
type AuthRefreshJSONBody struct {
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ListExpensesParams defines parameters for ListExpenses.
type ListExpensesParams struct {
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage  *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Status   *string `form:"status,omitempty" json:"status,omitempty"`
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// GetPendingApprovalsParams defines parameters for GetPendingApprovals.
type GetPendingApprovalsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UploadReceiptMultipartBody defines parameters for UploadReceipt.
type UploadReceiptMultipartBody struct {
	Receipt *openapi_types.File `json:"receipt,omitempty"`
}

// RejectExpenseJSONBody defines parameters for RejectExpense.
type RejectExpenseJSONBody struct {
	Reason string `json:"reason"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = AuthRequest

// AuthRefreshJSONRequestBody defines body for AuthRefresh for application/json ContentType.
type AuthRefreshJSONRequestBody AuthRefreshJSONBody

// CreateExpenseJSONRequestBody defines body for CreateExpense for application/json ContentType.
type CreateExpenseJSONRequestBody = ExpenseCreate

// ApproveExpenseJSONRequestBody defines body for ApproveExpense for application/json ContentType.
type ApproveExpenseJSONRequestBody = ApprovalRequest

// UploadReceiptMultipartRequestBody defines body for UploadReceipt for multipart/form-data ContentType.
type UploadReceiptMultipartRequestBody UploadReceiptMultipartBody

// RejectExpenseJSONRequestBody defines body for RejectExpense for application/json ContentType.
type RejectExpenseJSONRequestBody RejectExpenseJSONBody

// RetryPaymentJSONRequestBody defines body for RetryPayment for application/json ContentType.
type RetryPaymentJSONRequestBody = PaymentRetryRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
