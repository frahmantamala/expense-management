// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ApprovalRequest defines model for ApprovalRequest.
type ApprovalRequest struct {
	Notes *string `json:"notes,omitempty"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ComponentStatus defines model for ComponentStatus.
type ComponentStatus struct {
	CheckedAt  *time.Time `json:"checked_at,omitempty"`
	DurationMs *int       `json:"duration_ms,omitempty"`
	Status     *string    `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Expense defines model for Expense.
type Expense struct {
	AmountIdr     *int                `json:"amount_idr,omitempty"`
	Category      *string             `json:"category,omitempty"`
	Description   *string             `json:"description,omitempty"`
	ExpenseDate   *openapi_types.Date `json:"expense_date,omitempty"`
	ExpenseStatus *string             `json:"expense_status,omitempty"`
	Id            *int                `json:"id,omitempty"`
	ProcessedAt   *time.Time          `json:"processed_at"`
	ReceiptUrl    *string             `json:"receipt_url,omitempty"`
	SubmittedAt   *time.Time          `json:"submitted_at,omitempty"`
	UserId        *int                `json:"user_id,omitempty"`
}

// ExpenseCreate defines model for ExpenseCreate.
type ExpenseCreate struct {
	AmountIdr   int                `json:"amount_idr"`
	Category    *string            `json:"category,omitempty"`
	Description string             `json:"description"`
	ExpenseDate openapi_types.Date `json:"expense_date"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CheckedAt  *time.Time                  `json:"checked_at,omitempty"`
	Components *map[string]ComponentStatus `json:"components,omitempty"`
	Status     *string                     `json:"status,omitempty"`
}

// PagedExpenses defines model for PagedExpenses.
type PagedExpenses struct {
	Items   *[]Expense `json:"items,omitempty"`
	Page    *int       `json:"page,omitempty"`
	PerPage *int       `json:"per_page,omitempty"`
	Total   *int       `json:"total,omitempty"`
}

// PaymentRetryRequest defines model for PaymentRetryRequest.
type PaymentRetryRequest struct {
	ExternalId *string `json:"external_id,omitempty"`
}

// User defines model for User.
type User struct {
	Department *string `json:"department,omitempty"`
	Email      *string `json:"email,omitempty"`
	Id         *int    `json:"id,omitempty"`
	IsActive   *bool   `json:"is_active,omitempty"`
	Name       *string `json:"name,omitempty"`
}

// AuthRefreshJSONBody defines parameters for AuthRefresh.
type AuthRefreshJSONBody struct {
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ListExpensesParams defines parameters for ListExpenses.
type ListExpensesParams struct {
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage  *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Status   *string `form:"status,omitempty" json:"status,omitempty"`
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// UploadReceiptMultipartBody defines parameters for UploadReceipt.
type UploadReceiptMultipartBody struct {
	Receipt *openapi_types.File `json:"receipt,omitempty"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = AuthRequest

// AuthRefreshJSONRequestBody defines body for AuthRefresh for application/json ContentType.
type AuthRefreshJSONRequestBody AuthRefreshJSONBody

// CreateExpenseJSONRequestBody defines body for CreateExpense for application/json ContentType.
type CreateExpenseJSONRequestBody = ExpenseCreate

// ApproveExpenseJSONRequestBody defines body for ApproveExpense for application/json ContentType.
type ApproveExpenseJSONRequestBody = ApprovalRequest

// RetryPaymentJSONRequestBody defines body for RetryPayment for application/json ContentType.
type RetryPaymentJSONRequestBody = PaymentRetryRequest

// UploadReceiptMultipartRequestBody defines body for UploadReceipt for multipart/form-data ContentType.
type UploadReceiptMultipartRequestBody UploadReceiptMultipartBody

// RejectExpenseJSONRequestBody defines body for RejectExpense for application/json ContentType.
type RejectExpenseJSONRequestBody = ApprovalRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYUW/bNhD+KwK3tzmR7M7oqre26LoOHRAkLfYQBAYtXmQ2EsmQxzRG4P8+kJRtyaZU",
	"e627DVieYom8O37f3XcnPpFC1koKEGhI/kRMsYCa+n9fKqXlA60u4d6CQfdIaalAIwe/QEgM/+BSAcmJ",
	"Qc1FSVar0fqJnH+CAslqRF5aXPQagpryKmJoRBQ15rPULO5Fw73lGhjJrxsbrR03vVEYJYWB/TBoUYAx",
	"M5R3IKLRaLjVYBa9K2IHf72G9wopWrPvtVhAcQdsRj0w8EhrVTkTk2wyPctenI2zD5Nn+XSajyfn41+m",
	"L6bPf8qe51lGRuRW6tptI4winCGvgYz2o2ZWU+RSzGrT8ZBt1nKBUIJ2i80mym0kC6AVLpb7tmPnfaO1",
	"1P0YF5JBC7mW5xqMoSUcCOubRwVxEmtpBc4403E3BUUopV5GCWZgCs2VQyv6HoLXmcPbLegQEMN+vWEL",
	"694SzuKBKi1dOm4yI0q2sFVF544l1BZGsZQtgCucWR0vMGPnNUcc9rK3yxrQs3jgA2S91tDgNkRZTR95",
	"bWuST7PwNyI1F+HROPz+Z1ndEZ5W9F1XO4ZjevSbr6yBajm1NnTFnzLGXei0uuiE8aOGW5KTH9Lt8rRp",
	"FOmuvsX4/2pRuaAlsCaLIhLKEeruP0MRr6Vj64hqTZeh3ZQ96qRAz/rfokRaHVoNF3RZg8BLQL3sb4mP",
	"CFrQqltlQxh9NKD37TBQVKPzF0/93s7bJ0vczGiB/KGNxFzKCqhwrwWtD5NwlxZQWM1xeeWICeG+AqpB",
	"uzbtfs39r1/Xmfz7nx/IKEwo3qt/u02gBaIiK2eYi1vpg+Doc61hPPmDClqCAyN5efGOjMgDaONVgYzP",
	"s/PMHUAqEFRxkpNn59n5Mz9R4MIHl1KLi7SSJfc6omQgzsHtG+w7RnI/Yrz3S4JMgMFXki1D7xPYEEGV",
	"qnjhd6WfTNClkJ9fyt72ILXqapFrAf5BkBMf8yTLvrHrRqu8746yEj8WmUCtrWvq5NinZRIwcy82GEqL",
	"XwTRrdk7z88hrduOK1mWwBK3vJ1XJL/uZtT1zeqmHVvjYhtXM+ANB3bZLPr7/HZL9Pip8t9Fu4DPSZT6",
	"BqjwMqAMLQ0vIQLwe25wI/Su9jStAUEbT6YrPHJvQbu+EaQmaPaodRYGt9RWSPLxKKLHPUbW8h41NMkO",
	"t9T0uradPT7jOzczzNDemxMS3e2yEaYdQuzIEuMGkw3rrpFG6yqMhuvOfBrl7E6hBxXR+Fs7j6Fa+ICO",
	"xPXKz+1rZLvFlT5xtuqtsLeAW5xj9eX63TYrOSO7OEXyc1sWp0zQARCbsycMkPLKHAfmWxhCMqX+IiSM",
	"5zbWFML7k6N6gmFi54pn1VTF9+evwfjIKmiQHyJPhWk71W7c7m/sfhpvJvP/EoOxj4l+Fnfl3O9NHDT8",
	"WOi9x6QxEQO+uXnoh/yjqiRll82y7455bSvk7uModZ/KZ4wiHZ7SNsfZfFrPuaD6oE/Ygye2LkPWQ3Qs",
	"NQHYZB1xlBsfVp+gXfrX/+vZV+hZQPj4onK7unIWLkp623m4QiInPOXOJVXksPJuZ/IPWxJ/fRVOYQ1o",
	"k4a7gb6x5LXVGgT6i4wTnsfbj5zCmubG5qi5oQhBJ3Zj1YB+WJeKv3YlKVU8fRiT1c3qrwAAAP//DlK9",
	"UHAZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
