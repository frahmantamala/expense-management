// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ApprovalRequest defines model for ApprovalRequest.
type ApprovalRequest struct {
	Notes *string `json:"notes,omitempty"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ComponentStatus defines model for ComponentStatus.
type ComponentStatus struct {
	CheckedAt  *time.Time `json:"checked_at,omitempty"`
	DurationMs *int       `json:"duration_ms,omitempty"`
	Status     *string    `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Expense defines model for Expense.
type Expense struct {
	AmountIdr     *int                `json:"amount_idr,omitempty"`
	Category      *string             `json:"category,omitempty"`
	Description   *string             `json:"description,omitempty"`
	ExpenseDate   *openapi_types.Date `json:"expense_date,omitempty"`
	ExpenseStatus *string             `json:"expense_status,omitempty"`
	Id            *int                `json:"id,omitempty"`
	ProcessedAt   *time.Time          `json:"processed_at"`
	ReceiptUrl    *string             `json:"receipt_url,omitempty"`
	SubmittedAt   *time.Time          `json:"submitted_at,omitempty"`
	UserId        *int                `json:"user_id,omitempty"`
}

// ExpenseCreate defines model for ExpenseCreate.
type ExpenseCreate struct {
	AmountIdr   int                `json:"amount_idr"`
	Category    *string            `json:"category,omitempty"`
	Description string             `json:"description"`
	ExpenseDate openapi_types.Date `json:"expense_date"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CheckedAt  *time.Time                  `json:"checked_at,omitempty"`
	Components *map[string]ComponentStatus `json:"components,omitempty"`
	Status     *string                     `json:"status,omitempty"`
}

// PagedExpenses defines model for PagedExpenses.
type PagedExpenses struct {
	Items   *[]Expense `json:"items,omitempty"`
	Page    *int       `json:"page,omitempty"`
	PerPage *int       `json:"per_page,omitempty"`
	Total   *int       `json:"total,omitempty"`
}

// PaymentRetryRequest defines model for PaymentRetryRequest.
type PaymentRetryRequest struct {
	ExternalId *string `json:"external_id,omitempty"`
}

// User defines model for User.
type User struct {
	Department  *string   `json:"department,omitempty"`
	Email       *string   `json:"email,omitempty"`
	Id          *int      `json:"id,omitempty"`
	IsActive    *bool     `json:"is_active,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
}

// AuthRefreshJSONBody defines parameters for AuthRefresh.
type AuthRefreshJSONBody struct {
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ListExpensesParams defines parameters for ListExpenses.
type ListExpensesParams struct {
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage  *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Status   *string `form:"status,omitempty" json:"status,omitempty"`
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// UploadReceiptMultipartBody defines parameters for UploadReceipt.
type UploadReceiptMultipartBody struct {
	Receipt *openapi_types.File `json:"receipt,omitempty"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = AuthRequest

// AuthRefreshJSONRequestBody defines body for AuthRefresh for application/json ContentType.
type AuthRefreshJSONRequestBody AuthRefreshJSONBody

// CreateExpenseJSONRequestBody defines body for CreateExpense for application/json ContentType.
type CreateExpenseJSONRequestBody = ExpenseCreate

// ApproveExpenseJSONRequestBody defines body for ApproveExpense for application/json ContentType.
type ApproveExpenseJSONRequestBody = ApprovalRequest

// RetryPaymentJSONRequestBody defines body for RetryPayment for application/json ContentType.
type RetryPaymentJSONRequestBody = PaymentRetryRequest

// UploadReceiptMultipartRequestBody defines body for UploadReceipt for multipart/form-data ContentType.
type UploadReceiptMultipartRequestBody UploadReceiptMultipartBody

// RejectExpenseJSONRequestBody defines body for RejectExpense for application/json ContentType.
type RejectExpenseJSONRequestBody = ApprovalRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY3W7bNhR+FYHb3ZxIdmd01V1bdF2HDgiSFrsIAoMWT2w2EsmQh2mMwO8+kJRsyaZU",
	"e627DViuIpM8P993/sgnUshKSQECDcmfiCmWUFH/70ultHyg5SXcWzDoflJaKtDIwW8QEsM/uFJAcmJQ",
	"c7Eg6/Wo+UXOP0GBZD0iLy0uewVBRXkZETQiihrzWWoW16Lh3nINjOTXtYzWiZteK4ySwsC+GbQowJgZ",
	"yjsQUWs03Gowy94dMcdfN/BeIUVr9rUWSyjugM2oBwYeaaVKJ2KSTaZn2YuzcfZh8iyfTvPx5Hz8y/TF",
	"9PlP2fM8y8iI3EpduWOEUYQz5BWQ0b7VzGqKXIpZZToass1eLhAWoN1ms7Fya8kSaInL1b7smL9vtJa6",
	"H+NCMmgh19JcgTF0AQfC+uZRQZzESlqBM850XE1BERZSr6IEMzCF5sqhFV2HoHXm8HYbOgTEsG8ObGHd",
	"28JZ3FClpQvHTWREyRa2LOncsYTawigWsgVwhTOr4wlm7LziiMNa9k5ZA3oWN3yArNcaatyGKKvoI69s",
	"RfJpFv5GpOIi/DQO3/8sqzuFp2V9V9WO4Fg9+s1n1kC2nLo2dIs/ZYw702l50THjRw23JCc/pNvtad0o",
	"0t36FuP/q4vKBV0Aq6MoUkI5QtX9Z8jipnRsFVGt6Sq0m0VPdVKgZ/2rKJGWh2bDBV1VIPASUK/6W+Ij",
	"gha07GbZEEYfDeh9OQwU1ej0xUO/t/P2lSVuZrRA/tBGYi5lCVS4ZUEriHdy0BU3hkvRDYRrUlAxo37W",
	"cCHqvjR4p5oPymZ1Jrkk2nC8p6LL5j5GLhKhsJrj6srFQkDoFVAN2k0G7mvuv35tkuf3Pz+QURiKvKN+",
	"dRuzS0RF1k4wF7fSG8XRh3cdZMkfVNAFOPyTlxfvyIg8gDa+EJHxeXaeObulAkEVJzl5dp6dP/NDDC69",
	"cSm1uExLueC+dCkZYsUx7Hv6O0ZyP9W891tCZQKDryRbhXYrsOaeKlXywp9KP5lQCkNKfClh2rPbulv+",
	"XNfxP4QK5m2eZNk3Vl2XR6+7U8yJn8RMoNZWFXUdwGdCEjBzCxsMpcUvguj27Pnzc8iktuJSLhbAEre9",
	"HVckv+5G1PXN+qZtW61ia1c9Uw4bdllv+vv8dqvC8YPsv4t2AZ+TKPU1UGExoAyttrGACMDvucFNb3G5",
	"p2kFCNp4Ml3ikXsL2rWqUN1Cmxi1fGFwS22JJB+PIi2gR0jTUaKCJtnhkur22pazx2f85GZsGjp7c0Ki",
	"u409wrRDiB2ZYtxgsmHdtZ5oXoVptBkGTlM5u4PvQUk0/tbKY6gW3qAjcb3yV4UG2W5ypU+crXsz7C3g",
	"FudYfrl+t41KzsguTpH43KbFKQN0AMTa94QBUl6a48B8C0NIps085Cq3jTWFsH5yVE8wTOy8Kq3rrPj+",
	"/NUYH5kFNfJD5Kkw4KfaTfj9jd1fAOrLwH+Jwdj9pZ/F3XLuzyYOGn4s9F5jUouIAV8/dvRD/lGVkrLL",
	"ett3x7yyJXJ3H0vd7fyMUaTDU9rGnc1tfs4F1Qfdmg+e2LoMWQ/RsdQEYJPG4ig33qy+gnbpl/+vZ19R",
	"zwLCxyeVO9UtZ+Ftpredh1crckIvd97FIs7Ku53JPxxJ/ItZ8MIa0CYNzxF9Y8lrqzUI9G8nJ/THy494",
	"YU39SHTU3FAEoxO7kWpAPzSp4l96SUoVTx/GZH2z/isAAP//5Esfy+MZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
