// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ExpenseExpenseStatus.
const (
	Approved        ExpenseExpenseStatus = "approved"
	PendingApproval ExpenseExpenseStatus = "pending_approval"
	Rejected        ExpenseExpenseStatus = "rejected"
)

// Defines values for ExpenseCreateCategory.
const (
	Akomodasi  ExpenseCreateCategory = "akomodasi"
	BahanBakar ExpenseCreateCategory = "bahan_bakar"
	Kantor     ExpenseCreateCategory = "kantor"
	Kesehatan  ExpenseCreateCategory = "kesehatan"
	Komunikasi ExpenseCreateCategory = "komunikasi"
	LainLain   ExpenseCreateCategory = "lain_lain"
	Liburan    ExpenseCreateCategory = "liburan"
	Makan      ExpenseCreateCategory = "makan"
	Pelatihan  ExpenseCreateCategory = "pelatihan"
	Pemasaran  ExpenseCreateCategory = "pemasaran"
	Perjalanan ExpenseCreateCategory = "perjalanan"
	Software   ExpenseCreateCategory = "software"
)

// ApprovalRequest defines model for ApprovalRequest.
type ApprovalRequest struct {
	Notes *string `json:"notes,omitempty"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// Category defines model for Category.
type Category struct {
	// Description Category description
	Description *string `json:"description,omitempty"`

	// Name Category identifier
	Name *string `json:"name,omitempty"`
}

// ComponentStatus defines model for ComponentStatus.
type ComponentStatus struct {
	CheckedAt  *time.Time `json:"checked_at,omitempty"`
	DurationMs *int       `json:"duration_ms,omitempty"`
	Status     *string    `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Expense defines model for Expense.
type Expense struct {
	// AmountIdr Amount in Indonesian Rupiah
	AmountIdr *int `json:"amount_idr,omitempty"`

	// Category Expense category
	Category *string `json:"category,omitempty"`

	// CreatedAt When the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Expense description
	Description *string `json:"description,omitempty"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate *time.Time `json:"expense_date,omitempty"`

	// ExpenseStatus Current status of the expense
	ExpenseStatus *ExpenseExpenseStatus `json:"expense_status,omitempty"`

	// Id Unique expense ID
	Id *int `json:"id,omitempty"`

	// ProcessedAt When the expense was processed (approved/rejected)
	ProcessedAt *time.Time `json:"processed_at"`

	// ReceiptFilename Original filename of the receipt
	ReceiptFilename *string `json:"receipt_filename"`

	// ReceiptUrl URL of the receipt file from external storage
	ReceiptUrl *string `json:"receipt_url"`

	// SubmittedAt When the expense was submitted
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`

	// UpdatedAt When the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId ID of user who created the expense
	UserId *int `json:"user_id,omitempty"`
}

// ExpenseExpenseStatus Current status of the expense
type ExpenseExpenseStatus string

// ExpenseCreate defines model for ExpenseCreate.
type ExpenseCreate struct {
	// AmountIdr Amount in Indonesian Rupiah (minimum 10,000 IDR, maximum 50,000,000 IDR)
	AmountIdr int `json:"amount_idr"`

	// Category Expense category
	Category ExpenseCreateCategory `json:"category"`

	// Description Expense description
	Description string `json:"description"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate time.Time `json:"expense_date"`

	// ReceiptFilename Original filename of the receipt (from mock server response)
	ReceiptFilename *string `json:"receipt_filename"`

	// ReceiptUrl URL of the receipt file from external storage (from mock server response)
	ReceiptUrl *string `json:"receipt_url"`
}

// ExpenseCreateCategory Expense category
type ExpenseCreateCategory string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CheckedAt  *time.Time                  `json:"checked_at,omitempty"`
	Components *map[string]ComponentStatus `json:"components,omitempty"`
	Status     *string                     `json:"status,omitempty"`
}

// PagedExpenses defines model for PagedExpenses.
type PagedExpenses struct {
	Items   *[]Expense `json:"items,omitempty"`
	Page    *int       `json:"page,omitempty"`
	PerPage *int       `json:"per_page,omitempty"`
	Total   *int       `json:"total,omitempty"`
}

// PaymentRetryRequest defines model for PaymentRetryRequest.
type PaymentRetryRequest struct {
	// ExpenseId The expense ID associated with the payment
	ExpenseId string `json:"expense_id"`

	// ExternalId The external payment ID to retry
	ExternalId string `json:"external_id"`
}

// PaymentRetryResponse defines model for PaymentRetryResponse.
type PaymentRetryResponse struct {
	// Message Response message
	Message *string `json:"message,omitempty"`

	// PaymentId New payment ID if successful
	PaymentId *string `json:"payment_id,omitempty"`
}

// User defines model for User.
type User struct {
	Department  *string   `json:"department,omitempty"`
	Email       *string   `json:"email,omitempty"`
	Id          *int      `json:"id,omitempty"`
	IsActive    *bool     `json:"is_active,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
}

// AuthRefreshJSONBody defines parameters for AuthRefresh.
type AuthRefreshJSONBody struct {
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// ListExpensesParams defines parameters for ListExpenses.
type ListExpensesParams struct {
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage  *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Status   *string `form:"status,omitempty" json:"status,omitempty"`
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// GetPendingApprovalsParams defines parameters for GetPendingApprovals.
type GetPendingApprovalsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// RejectExpenseJSONBody defines parameters for RejectExpense.
type RejectExpenseJSONBody struct {
	Reason string `json:"reason"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = AuthRequest

// AuthRefreshJSONRequestBody defines body for AuthRefresh for application/json ContentType.
type AuthRefreshJSONRequestBody AuthRefreshJSONBody

// CreateExpenseJSONRequestBody defines body for CreateExpense for application/json ContentType.
type CreateExpenseJSONRequestBody = ExpenseCreate

// ApproveExpenseJSONRequestBody defines body for ApproveExpense for application/json ContentType.
type ApproveExpenseJSONRequestBody = ApprovalRequest

// RejectExpenseJSONRequestBody defines body for RejectExpense for application/json ContentType.
type RejectExpenseJSONRequestBody RejectExpenseJSONBody

// RetryPaymentJSONRequestBody defines body for RetryPayment for application/json ContentType.
type RetryPaymentJSONRequestBody = PaymentRetryRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaa2/bOtL+K4Te90OLdSPZSdrG39LLOZtFz26Q9uAAWwTGWBpZrCVSJakkRuH/vuBF",
	"smRTjt3EaRZYoCgsaTg3zjOcGeZHEPOi5AyZksH4RyDjDAswP8/LUvAbyK/we4VS6Vel4CUKRdEQMK7s",
	"D7UoMRgHUgnKZsFyOajf8Ok3jFWwHATnlcp6GWEBNPcwGgQlSHnLReKXIvB7RQUmwfir49Facd2rhSw5",
	"k7ipBsQxSjlRfI7Mq43AVKDMeil8hr8HhTMuFpviEpSxoKWinG08NstI+/UgwDsoylxL+AMhlwRYQpAp",
	"FAooK5CpYLCpNoMCt0igCTJFU4qiI6CAObBNdl4b6xD6rEBVctPUOMN4jskEzOavZIyi0emr6OzVMPoy",
	"Oh6fno6Ho6Ph29Oz0zd/i96MoygYBCkXhV4WJKDwlaIF+kxMKgHarkkhOxKihpYyhTMUmlg2Wq40yRBy",
	"lS12s/ejEFz0x1HME2xFR0tygVLCDHcMnY93JfoDteAVUxOaiM1tPTffCGXkgiWcoaTAyFVVUsja23sa",
	"RZHXOXErXrucnTqkodghWgZBLBBUs/Vdjn9lyIjKkAiMuUjILUji6DvMmzAZfhmejU/ejE/Ojl6/Pts3",
	"RrbhrTauF27aPqKdOSMJshkwMs8pek1Gy2uitdmU9AEUktvackdLeBxXQvTbHUVj8+/fO5tba7GK9jX8",
	"a3lMEfud8LStj1aDVYVOrCWyhLLZBNxxEAwC+9MoK1BHK5p0u1K8RbChF002dfmT0e/VyhkXH9puGPrC",
	"tBRcJ+v7AqvmqCOrWUJe1PqFtfovHx5vrMpzmOr1SlQ48J0eMdJSTVKaoz8l/0vQGWWQk5qk3hW3tKNk",
	"zS6vWJxNtMpHZZLuo0glcs9WXH1ak2q0IangBcE7hUIrKBUXOpG1FcqUKuU4DF+fRnEaT+OTN5Aep8lo",
	"lL5+O3wbw1HB4zmU9IjyUKFU4c0w1KxlWCs0HB07GxoPV4LuYpKspgVVap9waJYcINVUZbJX0stBKuIW",
	"HUIdiWLiw93FB73X+jO5zXide9cTQa3NaBOIW46t94bZox1e5EVBGS2qggyjQRRF5OLD1YAUcGfenZp3",
	"9fuXnpPOUbpn+8oyDMbDxzkMm4QpvkEOzJyH9bk4B6a4LrBKXV6DMC9LzEHRzBLwomJ0DlLHu+SpugWh",
	"vT9HiRkoQwNzXvDEkkwhAzaZwhw015xOK8szB8om+r9uRu49nw91KhZw9wnZTGXG48bZ9fPw2Z6ZD0/R",
	"5IVJlDrVEYniBgURrlB8+ezS987K/rrUvtbltZJHN3RbWF0LJl8f+HdT7W+p4A/dr3SbbkgSqq2A/LKj",
	"xv8LTINx8H/hijx0DXq43nP5MvGDG51LmGHikoCnraMKi+6PbRrX7cxKEAgBC9vmz3o6phLFpP+r4gpy",
	"3ye/MQvdIV+hEov+UYQLHd9p+SVrl6gEpOQxNQfmLVWZwVxpZfjrcQu+LawdOh0TLUNxIrS+wX3AaHMf",
	"tK24vtcTfSBoNatdZeslpKYY+AY3RoTX2H/ibdtGmhJZmdFLWuW7xeWfEoVvoFKCUMb/vulN/5SJJv7w",
	"onICsaI37eibcp4jsPZcZdN4FAWVknLWBd/XIAbmGik0KYtNbAfSPEAyqSuv68EKVxsiugja9JFGP8aV",
	"oGrxWePPeugdgkBxXulT+EcwNU+/1QnrH3990aWHodaGmq+r/dBnQLDUjClLuVGKKpNS6irhD2AwQ7Ot",
	"55cXwSC4QSHtlg+PoqNI681LZFDSYBwcH0VHx2ZgpzKjXAiVysKcz6ipREpu8al32Mx2LhJdIVYq+2RI",
	"bPyjVO94srBjF6bc3kNZ5jQ2q8Jv0lY2Ng3dl6Tac8plF2T6fDIvbPQbnUdR9MiiHRqN7C5szNRR2q2t",
	"igJ0WWqQQKzP9IfGh7xS9zpR02zYc7KJ15zPZpgQTd6Oq2D8tRtRX6+X123dnIiVXm5+ul2xK0f08/vb",
	"zQr7D22f17YzvCXerXeOsh+tl10N5CyfocfFv6N6v6J6oF1rVVNH+k41QTMd3yWlbbjmE5VKV7vYbca0",
	"Al1X/Y6KQJ73EYbYKnG8XtOSmjpI5ywBBSoU0oBAJ6zge4XmnLangi1pBi1fJZhClSvvPGs56GFSVz9e",
	"RqNod06uFGzz2cCBf2Wrru5fe31AgHSLUE8YaA8le6YmHTnNrusj25uP7AzjYzMKOcSJ0x2X7JR8ho8t",
	"3OfVehC/l18/m6FaMzzqgCt0k+RtqenSktRXjztiLacFVf0YaUY/w2gPxPA0ldjD1cfm+lFzaTsjPbS7",
	"su7xVrjOyJ06KA/w7G51gHQSHT9edHbu2TwK/MbFlCYJMvKKFKb6FMTe4pIGQ3vFrz4oaqvqC4/GPPKi",
	"lsFZvni5Ft0/aLLcFtqrLOKLaF0Fr2KPJsF6FvBk38eLvZ9MEdiMBxXQXO7van+e0J4M6y5JIwNUnHmK",
	"RUtxcL8eoMlY+8uKpcv6j5Y9fIOf/ju5XaDerDYQj54O4u8gIaL203NML1qnk6fTqW62GVck5RXbM8E5",
	"0GxDnptI9APvyhA8U9ytN3/gKFZAuGCySlMaU2SKJDyuCmTKsCPaNzTpwUh73Ob4Xj9B73g/sps7+J9C",
	"drP6f8j+r0a2RWUX2HbY31uV2GuQ4IDFw9pFi8dqPl/r1e0SYq5grBVuVhzaSXjv8MiMsy+bAfwhDm7f",
	"FcITj4u8s3uPXx2dvT5oD9h/Ocx/LaQGwelTWn/B6itXe7+KesG+wNY7WF+YpFwQYF2YVxKFDO1lRO/Q",
	"z/65l7k5OWB4Gv4eP1QSxf79Qez+Rq1quFo32kLDXIAHIZQ0vBkGy+vlfwIAAP//Kq9YFs0sAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
