// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ExpenseExpenseStatus.
const (
	ExpenseExpenseStatusApproved        ExpenseExpenseStatus = "approved"
	ExpenseExpenseStatusPendingApproval ExpenseExpenseStatus = "pending_approval"
	ExpenseExpenseStatusRejected        ExpenseExpenseStatus = "rejected"
)

// Defines values for ExpenseCreateCategory.
const (
	Kantor     ExpenseCreateCategory = "kantor"
	LainLain   ExpenseCreateCategory = "lain_lain"
	Liburan    ExpenseCreateCategory = "liburan"
	Makan      ExpenseCreateCategory = "makan"
	Perjalanan ExpenseCreateCategory = "perjalanan"
)

// Defines values for GetAllExpensesParamsStatus.
const (
	GetAllExpensesParamsStatusApproved        GetAllExpensesParamsStatus = "approved"
	GetAllExpensesParamsStatusPendingApproval GetAllExpensesParamsStatus = "pending_approval"
	GetAllExpensesParamsStatusRejected        GetAllExpensesParamsStatus = "rejected"
)

// Defines values for GetAllExpensesParamsSortBy.
const (
	Amount       GetAllExpensesParamsSortBy = "amount"
	CreatedAt    GetAllExpensesParamsSortBy = "created_at"
	CreatedAt1   GetAllExpensesParamsSortBy = "createdAt"
	ExpenseDate  GetAllExpensesParamsSortBy = "expense_date"
	SubmittedAt  GetAllExpensesParamsSortBy = "submitted_at"
	SubmittedAt1 GetAllExpensesParamsSortBy = "submittedAt"
	UpdatedAt    GetAllExpensesParamsSortBy = "updated_at"
	UpdatedAt1   GetAllExpensesParamsSortBy = "updatedAt"
)

// Defines values for GetAllExpensesParamsSortOrder.
const (
	Asc  GetAllExpensesParamsSortOrder = "asc"
	Desc GetAllExpensesParamsSortOrder = "desc"
)

// ApprovalRequest defines model for ApprovalRequest.
type ApprovalRequest struct {
	Notes *string `json:"notes,omitempty"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// Category defines model for Category.
type Category struct {
	// Description Category description
	Description *string `json:"description,omitempty"`

	// Name Category identifier
	Name *string `json:"name,omitempty"`
}

// ComponentStatus defines model for ComponentStatus.
type ComponentStatus struct {
	CheckedAt  *time.Time `json:"checked_at,omitempty"`
	DurationMs *int       `json:"duration_ms,omitempty"`
	Status     *string    `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Expense defines model for Expense.
type Expense struct {
	// AmountIdr Amount in Indonesian Rupiah
	AmountIdr *int `json:"amount_idr,omitempty"`

	// Category Expense category
	Category *string `json:"category,omitempty"`

	// CreatedAt When the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Expense description
	Description *string `json:"description,omitempty"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate *time.Time `json:"expense_date,omitempty"`

	// ExpenseStatus Current status of the expense
	ExpenseStatus *ExpenseExpenseStatus `json:"expense_status,omitempty"`

	// Id Unique expense ID
	Id *int `json:"id,omitempty"`

	// ProcessedAt When the expense was processed (approved/rejected)
	ProcessedAt *time.Time `json:"processed_at"`

	// ReceiptFilename Original filename of the receipt
	ReceiptFilename *string `json:"receipt_filename"`

	// ReceiptUrl URL of the receipt file from external storage
	ReceiptUrl *string `json:"receipt_url"`

	// SubmittedAt When the expense was submitted
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`

	// UpdatedAt When the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId ID of user who created the expense
	UserId *int `json:"user_id,omitempty"`
}

// ExpenseExpenseStatus Current status of the expense
type ExpenseExpenseStatus string

// ExpenseCreate defines model for ExpenseCreate.
type ExpenseCreate struct {
	// AmountIdr Amount in Indonesian Rupiah (minimum 10,000 IDR, maximum 50,000,000 IDR)
	AmountIdr int `json:"amount_idr"`

	// Category Expense category
	Category ExpenseCreateCategory `json:"category"`

	// Description Expense description
	Description string `json:"description"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate time.Time `json:"expense_date"`

	// ReceiptFilename Original filename of the receipt (from mock server response)
	ReceiptFilename *string `json:"receipt_filename"`

	// ReceiptUrl URL of the receipt file from external storage (from mock server response)
	ReceiptUrl *string `json:"receipt_url"`
}

// ExpenseCreateCategory Expense category
type ExpenseCreateCategory string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CheckedAt  *time.Time                  `json:"checked_at,omitempty"`
	Components *map[string]ComponentStatus `json:"components,omitempty"`
	Status     *string                     `json:"status,omitempty"`
}

// PagedExpenses defines model for PagedExpenses.
type PagedExpenses struct {
	Items   *[]Expense `json:"items,omitempty"`
	Page    *int       `json:"page,omitempty"`
	PerPage *int       `json:"per_page,omitempty"`
	Total   *int       `json:"total,omitempty"`
}

// PaymentRetryRequest defines model for PaymentRetryRequest.
type PaymentRetryRequest struct {
	// ExpenseId The expense ID associated with the payment
	ExpenseId string `json:"expense_id"`

	// ExternalId The external payment ID to retry
	ExternalId string `json:"external_id"`
}

// PaymentRetryResponse defines model for PaymentRetryResponse.
type PaymentRetryResponse struct {
	// Message Response message
	Message *string `json:"message,omitempty"`

	// PaymentId New payment ID if successful
	PaymentId *string `json:"payment_id,omitempty"`
}

// User defines model for User.
type User struct {
	Department  *string   `json:"department,omitempty"`
	Email       *string   `json:"email,omitempty"`
	Id          *int      `json:"id,omitempty"`
	IsActive    *bool     `json:"is_active,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
}

// AuthRefreshJSONBody defines parameters for AuthRefresh.
type AuthRefreshJSONBody struct {
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// GetAllExpensesParams defines parameters for GetAllExpenses.
type GetAllExpensesParams struct {
	// PerPage Number of expenses to return per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number for pagination (1-based)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Search Search term to filter expenses by description or category
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// CategoryId Filter expenses by category
	CategoryId *string `form:"category_id,omitempty" json:"category_id,omitempty"`

	// Status Filter expenses by status
	Status *GetAllExpensesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// SortBy Field to sort by
	SortBy *GetAllExpensesParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortOrder Sort order
	SortOrder *GetAllExpensesParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`
}

// GetAllExpensesParamsStatus defines parameters for GetAllExpenses.
type GetAllExpensesParamsStatus string

// GetAllExpensesParamsSortBy defines parameters for GetAllExpenses.
type GetAllExpensesParamsSortBy string

// GetAllExpensesParamsSortOrder defines parameters for GetAllExpenses.
type GetAllExpensesParamsSortOrder string

// RejectExpenseJSONBody defines parameters for RejectExpense.
type RejectExpenseJSONBody struct {
	Reason string `json:"reason"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = AuthRequest

// AuthRefreshJSONRequestBody defines body for AuthRefresh for application/json ContentType.
type AuthRefreshJSONRequestBody AuthRefreshJSONBody

// CreateExpenseJSONRequestBody defines body for CreateExpense for application/json ContentType.
type CreateExpenseJSONRequestBody = ExpenseCreate

// ApproveExpenseJSONRequestBody defines body for ApproveExpense for application/json ContentType.
type ApproveExpenseJSONRequestBody = ApprovalRequest

// RejectExpenseJSONRequestBody defines body for RejectExpense for application/json ContentType.
type RejectExpenseJSONRequestBody RejectExpenseJSONBody

// RetryPaymentJSONRequestBody defines body for RetryPayment for application/json ContentType.
type RetryPaymentJSONRequestBody = PaymentRetryRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
