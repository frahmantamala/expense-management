// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ExpenseExpenseStatus.
const (
	Approved        ExpenseExpenseStatus = "approved"
	PendingApproval ExpenseExpenseStatus = "pending_approval"
	Rejected        ExpenseExpenseStatus = "rejected"
)

// Defines values for ExpenseCreateCategory.
const (
	Akomodasi  ExpenseCreateCategory = "akomodasi"
	BahanBakar ExpenseCreateCategory = "bahan_bakar"
	Kantor     ExpenseCreateCategory = "kantor"
	Kesehatan  ExpenseCreateCategory = "kesehatan"
	Komunikasi ExpenseCreateCategory = "komunikasi"
	LainLain   ExpenseCreateCategory = "lain_lain"
	Liburan    ExpenseCreateCategory = "liburan"
	Makan      ExpenseCreateCategory = "makan"
	Pelatihan  ExpenseCreateCategory = "pelatihan"
	Pemasaran  ExpenseCreateCategory = "pemasaran"
	Perjalanan ExpenseCreateCategory = "perjalanan"
	Software   ExpenseCreateCategory = "software"
)

// ApprovalRequest defines model for ApprovalRequest.
type ApprovalRequest struct {
	Notes *string `json:"notes,omitempty"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// Category defines model for Category.
type Category struct {
	// Description Category description
	Description *string `json:"description,omitempty"`

	// Name Category identifier
	Name *string `json:"name,omitempty"`
}

// ComponentStatus defines model for ComponentStatus.
type ComponentStatus struct {
	CheckedAt  *time.Time `json:"checked_at,omitempty"`
	DurationMs *int       `json:"duration_ms,omitempty"`
	Status     *string    `json:"status,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Expense defines model for Expense.
type Expense struct {
	// AmountIdr Amount in Indonesian Rupiah
	AmountIdr *int `json:"amount_idr,omitempty"`

	// Category Expense category
	Category *string `json:"category,omitempty"`

	// CreatedAt When the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Expense description
	Description *string `json:"description,omitempty"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate *time.Time `json:"expense_date,omitempty"`

	// ExpenseStatus Current status of the expense
	ExpenseStatus *ExpenseExpenseStatus `json:"expense_status,omitempty"`

	// Id Unique expense ID
	Id *int `json:"id,omitempty"`

	// ProcessedAt When the expense was processed (approved/rejected)
	ProcessedAt *time.Time `json:"processed_at"`

	// ReceiptFilename Original filename of the receipt
	ReceiptFilename *string `json:"receipt_filename"`

	// ReceiptUrl URL of the receipt file from external storage
	ReceiptUrl *string `json:"receipt_url"`

	// SubmittedAt When the expense was submitted
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`

	// UpdatedAt When the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId ID of user who created the expense
	UserId *int `json:"user_id,omitempty"`
}

// ExpenseExpenseStatus Current status of the expense
type ExpenseExpenseStatus string

// ExpenseCreate defines model for ExpenseCreate.
type ExpenseCreate struct {
	// AmountIdr Amount in Indonesian Rupiah (minimum 10,000 IDR, maximum 50,000,000 IDR)
	AmountIdr int `json:"amount_idr"`

	// Category Expense category
	Category ExpenseCreateCategory `json:"category"`

	// Description Expense description
	Description string `json:"description"`

	// ExpenseDate Date when the expense occurred
	ExpenseDate time.Time `json:"expense_date"`

	// ReceiptFilename Original filename of the receipt (from mock server response)
	ReceiptFilename *string `json:"receipt_filename"`

	// ReceiptUrl URL of the receipt file from external storage (from mock server response)
	ReceiptUrl *string `json:"receipt_url"`
}

// ExpenseCreateCategory Expense category
type ExpenseCreateCategory string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CheckedAt  *time.Time                  `json:"checked_at,omitempty"`
	Components *map[string]ComponentStatus `json:"components,omitempty"`
	Status     *string                     `json:"status,omitempty"`
}

// PagedExpenses defines model for PagedExpenses.
type PagedExpenses struct {
	Items   *[]Expense `json:"items,omitempty"`
	Page    *int       `json:"page,omitempty"`
	PerPage *int       `json:"per_page,omitempty"`
	Total   *int       `json:"total,omitempty"`
}

// PaymentRetryRequest defines model for PaymentRetryRequest.
type PaymentRetryRequest struct {
	// ExpenseId The expense ID associated with the payment
	ExpenseId string `json:"expense_id"`

	// ExternalId The external payment ID to retry
	ExternalId string `json:"external_id"`
}

// PaymentRetryResponse defines model for PaymentRetryResponse.
type PaymentRetryResponse struct {
	// Message Response message
	Message *string `json:"message,omitempty"`

	// PaymentId New payment ID if successful
	PaymentId *string `json:"payment_id,omitempty"`
}

// User defines model for User.
type User struct {
	Department  *string   `json:"department,omitempty"`
	Email       *string   `json:"email,omitempty"`
	Id          *int      `json:"id,omitempty"`
	IsActive    *bool     `json:"is_active,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
}

// AuthRefreshJSONBody defines parameters for AuthRefresh.
type AuthRefreshJSONBody struct {
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// GetUserExpensesParams defines parameters for GetUserExpenses.
type GetUserExpensesParams struct {
	// Limit Maximum number of expenses to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of expenses to skip for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// RejectExpenseJSONBody defines parameters for RejectExpense.
type RejectExpenseJSONBody struct {
	Reason string `json:"reason"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = AuthRequest

// AuthRefreshJSONRequestBody defines body for AuthRefresh for application/json ContentType.
type AuthRefreshJSONRequestBody AuthRefreshJSONBody

// CreateExpenseJSONRequestBody defines body for CreateExpense for application/json ContentType.
type CreateExpenseJSONRequestBody = ExpenseCreate

// ApproveExpenseJSONRequestBody defines body for ApproveExpense for application/json ContentType.
type ApproveExpenseJSONRequestBody = ApprovalRequest

// RejectExpenseJSONRequestBody defines body for RejectExpense for application/json ContentType.
type RejectExpenseJSONRequestBody RejectExpenseJSONBody

// RetryPaymentJSONRequestBody defines body for RetryPayment for application/json ContentType.
type RetryPaymentJSONRequestBody = PaymentRetryRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
