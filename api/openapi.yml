openapi: 3.0.3
info:
  title: Expense Management API
  version: "1.0.0"
servers:
  - url: /api/v1
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        department:
          type: string
        is_active:
          type: boolean
        permissions:
          type: array
          items:
            type: string
          example: ["can_approve", "can_reject", "can_read_expense"]
    AuthRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
    ExpenseCreate:
      type: object
      required: [amount_idr, description, category, expense_date]
      properties:
        amount_idr:
          type: integer
          minimum: 1
          maximum: 999999999
          description: Amount in Indonesian Rupiah
          example: 50000
        description:
          type: string
          minLength: 1
          maxLength: 500
          description: Expense description
          example: "Makan siang dengan klien"
        category:
          type: string
          description: Expense category
          example: "makan"
          enum: ["perjalanan", "makan", "kantor", "pemasaran", "pelatihan", "komunikasi", "software", "kesehatan", "akomodasi", "bahan_bakar", "liburan", "lain_lain"]
        expense_date:
          type: string
          format: date-time
          description: Date when the expense occurred
          example: "2025-09-11T00:00:00Z"
    Expense:
      type: object
      properties:
        id: 
          type: integer
          description: Unique expense ID
          example: 1
        user_id: 
          type: integer
          description: ID of user who created the expense
          example: 2
        amount_idr: 
          type: integer
          description: Amount in Indonesian Rupiah
          example: 50000
        description: 
          type: string
          description: Expense description
          example: "Makan siang dengan klien"
        category: 
          type: string
          description: Expense category
          example: "makan"
        expense_status: 
          type: string
          description: Current status of the expense
          enum: ["pending_approval", "approved", "rejected"]
          example: "approved"
        expense_date: 
          type: string
          format: date-time
          description: Date when the expense occurred
          example: "2025-09-11T00:00:00Z"
        submitted_at: 
          type: string
          format: date-time
          description: When the expense was submitted
          example: "2025-09-11T19:47:49.669+07:00"
        processed_at: 
          type: string
          format: date-time
          nullable: true
          description: When the expense was processed (approved/rejected)
          example: "2025-09-11T19:47:49.669+07:00"
        created_at: 
          type: string
          format: date-time
          description: When the record was created
          example: "2025-09-11T19:47:49.669+07:00"
        updated_at: 
          type: string
          format: date-time
          description: When the record was last updated
          example: "2025-09-11T19:47:49.669+07:00"
    ApprovalRequest:
      type: object
      properties:
        notes:
          type: string
    PaymentRetryRequest:
      type: object
      properties:
        external_id:
          type: string
    PagedExpenses:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        items:
          type: array
          items:
            $ref: "#/components/schemas/Expense"
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    ComponentStatus:
      type: object
      properties:
        status:
          type: string
          example: healthy
        checked_at:
          type: string
          format: date-time
          example: "2025-09-10T23:55:12.185957+07:00"
        duration_ms:
          type: integer
          example: 0

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: healthy
        checked_at:
          type: string
          format: date-time
          example: "2025-09-10T23:55:12.185957+07:00"
        components:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentStatus'

paths:
  /auth/login:
    post:
      summary: User login
      operationId: AuthLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/refresh:
    post:
      summary: Refresh token
      operationId: AuthRefresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: new tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/logout:
    post:
      summary: Logout
      operationId: AuthLogout
      security:
        - BearerAuth: []
      responses:
        '204':
          description: logged out

  /users/me:
    get:
      summary: Get current user
      operationId: GetCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /expenses:
    post:
      summary: Submit expense
      operationId: CreateExpense
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCreate'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
    get:
      summary: List expenses
      operationId: ListExpenses
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: category
          schema:
            type: string
      responses:
        '200':
          description: paged
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedExpenses'

  /expenses/pending:
    get:
      summary: Get pending approval expenses (manager only)
      operationId: GetPendingApprovals
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 100
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: pending expenses
          content:
            application/json:
              schema:
                type: object
                properties:
                  expenses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Expense'
                  limit:
                    type: integer
                  offset:
                    type: integer
        '403':
          description: Forbidden - manager access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /expenses/{id}:
    get:
      summary: Get expense
      operationId: GetExpense
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: expense details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'

  /expenses/{id}/receipt:
    post:
      summary: Upload receipt
      operationId: UploadReceipt
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                receipt:
                  type: string
                  format: binary
      responses:
        '200':
          description: uploaded

  /expenses/{id}/approve:
    patch:
      summary: Approve expense
      operationId: ApproveExpense
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalRequest'
      responses:
        '200':
          description: approved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: approved
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - manager access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Expense not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /expenses/{id}/reject:
    patch:
      summary: Reject expense
      operationId: RejectExpense
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason]
              properties:
                reason:
                  type: string
                  example: "Insufficient documentation provided"
      responses:
        '200':
          description: rejected
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: rejected
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - manager access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Expense not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /expenses/{id}/payment/retry:
    post:
      summary: Retry payment
      operationId: RetryPayment
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRetryRequest'
      responses:
        '200':
          description: payment retried

  /health:
    get:
      summary: Health check
      operationId: Health
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
