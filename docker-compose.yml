version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: expense_management_db
    restart: always
    environment:
      POSTGRES_DB: expense_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - expense_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d expense_management"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: expense_management_app
    restart: always
    environment:
      DB_SOURCE: "postgresql://postgres:postgres@postgres:5432/expense_management?sslmode=disable"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: expense_management

      DOCKER_ENV: "true"

      SESSION_SECRET: "jwt-secret-key"
      BCRYPT_COST: 12

      PAYMENT_MOCK_API_URL: "https://1620e98f-7759-431c-a2aa-f449d591150b.mock.pstmn.io/v1"
      PAYMENT_API_KEY: "your-api-key-here"
      PAYMENT_TIMEOUT: 20s
      PAYMENT_WEBHOOK_URL: "http://localhost:8081/api/v1/payment/callback"
      PAYMENT_MAX_WORKERS: 10
      PAYMENT_JOB_QUEUE_SIZE: 100
      PAYMENT_WORKER_POOL_SIZE: 10

      LOG_LEVEL: debug
      LOG_FORMAT: text

      METRICS_ENABLED: true
      METRICS_PATH: /metrics
      TRACING_ENABLED: false
      TRACING_SERVICE_NAME: expense_management
      TRACING_SAMPLING_RATE: 1.0
      
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - expense_network
    volumes:
      - ./config.yml:/root/config.yml:ro
    # command: ["./docker-entrypoint.sh"]
    # To run the worker, override the command like below:
    command: ["./docker-entrypoint.sh", "worker", "payment"]

networks:
  expense_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
